"use strict";(self.webpackChunkdocuments=self.webpackChunkdocuments||[]).push([[3564],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,k=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9752:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7366),r=(n(9496),n(9613));const o={id:"angular-starter",title:"Angular"},i=void 0,l={unversionedId:"Experiences/Angular/angular-starter",id:"Experiences/Angular/angular-starter",title:"Angular",description:"You can find the codes which this document was created based on that here: Acme Product Management - Github",source:"@site/docs/Experiences/Angular/angular-starter.mdx",sourceDirName:"Experiences/Angular",slug:"/Experiences/Angular/angular-starter",permalink:"/new-documents/docs/Experiences/Angular/angular-starter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Experiences/Angular/angular-starter.mdx",tags:[],version:"current",frontMatter:{id:"angular-starter",title:"Angular"},sidebar:"tutorialSidebar",previous:{title:"Translate your site",permalink:"/new-documents/docs/tutorial-extras/translate-your-site"},next:{title:"Angular Testing",permalink:"/new-documents/docs/Experiences/test/angular-test"}},p={},s=[{value:"Installation",id:"installation",level:2},{value:"Commands",id:"commands",level:3},{value:"component",id:"component",level:4},{value:"Service",id:"service",level:4},{value:"Guard",id:"guard",level:4},{value:"Module",id:"module",level:4},{value:"Pipe",id:"pipe",level:4},{value:"add a 3rd party module",id:"add-a-3rd-party-module",level:4},{value:"keywords",id:"keywords",level:2},{value:"Decorator",id:"decorator",level:3},{value:"Directives",id:"directives",level:3},{value:"Interpolation",id:"interpolation",level:3},{value:"Property Binding &amp; Template Expression",id:"property-binding--template-expression",level:3},{value:"Event Binding",id:"event-binding",level:3},{value:"Two way data binding",id:"two-way-data-binding",level:3},{value:"Pipes",id:"pipes",level:3},{value:"get &amp; set",id:"get--set",level:3},{value:"@Input()",id:"input",level:3},{value:"@Output()",id:"output",level:3},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Services",id:"services",level:4},{value:"RxJs &amp; Observable",id:"rxjs--observable",level:3},{value:"http",id:"http",level:4},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:3},{value:"OnInit",id:"oninit",level:4},{value:"onChanges",id:"onchanges",level:4},{value:"onDestroy",id:"ondestroy",level:4},{value:"Custom Pipe",id:"custom-pipe",level:3},{value:"Router",id:"router",level:3},{value:"Guard",id:"guard-1",level:3},{value:"NgModule",id:"ngmodule",level:3},{value:"Shared Module (Standalone)",id:"shared-module-standalone",level:3},{value:"declarations array",id:"declarations-array",level:3},{value:"exports array",id:"exports-array",level:3},{value:"imports array",id:"imports-array",level:3},{value:"providers array",id:"providers-array",level:3},{value:"Tips",id:"tips",level:2},{value:"Errors",id:"errors",level:3}],d={toc:s},u="wrapper";function c(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can find the codes which this document was created based on that here: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mamadfar/acme-product-management__angular"},"Acme Product Management - Github")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"install globally")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm add @angular/cli -g\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"install new project")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ng new my-project --prefix pm\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--prefix")," is an optional property to add a prefix to all the selector directives in our components. In this case we changed the ",(0,r.kt)("inlineCode",{parentName:"li"},"app")," prefix to ",(0,r.kt)("inlineCode",{parentName:"li"},"pm"),"(",(0,r.kt)("pm-root",null),")")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"answer the questions based on your needs"),(0,r.kt)("li",{parentName:"ol"},"go the project folder, in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"cd my-project")),(0,r.kt)("li",{parentName:"ol"},"start the app")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm start\n")),(0,r.kt)("h3",{id:"commands"},"Commands"),(0,r.kt)("p",null,"Here is some useful commands:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/cli/generate"},"ng generate")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/cli/add"},"ng add")),(0,r.kt)("h4",{id:"component"},"component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ng g c [path/component name]\n")),(0,r.kt)("h4",{id:"service"},"Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ng g s [path/service name]\n")),(0,r.kt)("h4",{id:"guard"},"Guard"),(0,r.kt)("p",null,"To protect our routes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ng g g [path/guard name]\n")),(0,r.kt)("h4",{id:"module"},"Module"),(0,r.kt)("p",null,"To generate an Angular module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ng g m [path/module name] --flat -m [module name - the exist one which we want to import new module in its array]\n")),(0,r.kt)("h4",{id:"pipe"},"Pipe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ng g p [path/pipe name]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We can use ",(0,r.kt)("inlineCode",{parentName:"li"},"--flat")," to create a component, module, etc without folder."),(0,r.kt)("li",{parentName:"ul"},"We can use ",(0,r.kt)("inlineCode",{parentName:"li"},"--skip-tests")," to prevent generating testing file for component, service, guard")),(0,r.kt)("h4",{id:"add-a-3rd-party-module"},"add a 3rd party module"),(0,r.kt)("p",null,"We can use ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," to add an external library or module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ng add [module name]\n")),(0,r.kt)("h2",{id:"keywords"},"keywords"),(0,r.kt)("h3",{id:"decorator"},"Decorator"),(0,r.kt)("p",null,"Decorators are functions and by using them we can add metadata or directives and we use them to add something to our class, like ",(0,r.kt)("inlineCode",{parentName:"p"},"@Component()"),",\nso in this case we can tell Angular how it should run our component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'@Component({\n  selector: `pm-root`,\n  template: `\n    <div>\n      <h1>{{ pageTitle }}</h1>\n      <div>First Component</div>\n    </div>\n  `,\n})\nexport class AppComponent {\n  pageTitle: string = "Hello World!";\n}\n')),(0,r.kt)("h3",{id:"directives"},"Directives"),(0,r.kt)("p",null,"In fact, directives are HTML-like tags and we use them to create something custom or we can use the built-in directives like: ",(0,r.kt)("inlineCode",{parentName:"p"},"*ngIf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*ngFor")),(0,r.kt)("h3",{id:"interpolation"},"Interpolation"),(0,r.kt)("p",null,"Is a way to execute js code inside HTML code and it's one way binding from component class property to an element property"),(0,r.kt)("h3",{id:"property-binding--template-expression"},"Property Binding & Template Expression"),(0,r.kt)("p",null,"To bind a value (template expression is a property in our class and we can bind it to properties with quotes) to an element\nproperty with putting the property name inside a bracket ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-angular"},'<img [src]="product.imageUrl" />\n<img src="{{ product.imageUrl }}" />\n<input type="text" [disabled]="isDisabled" />\n<img src="http://myImages.org/{{ product.imageUrl }}" />\n')),(0,r.kt)("p",null,"\ud83d\udea9 Generally ",(0,r.kt)("strong",{parentName:"p"},"Interpolation")," is used for return a value to HTML code and ",(0,r.kt)("strong",{parentName:"p"},"Property Binding")," is used for bind any type of value, like boolean, number, etc."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/property-binding"},"Property Binding")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/property-binding-best-practices"},"Property Binding Best Practice")),(0,r.kt)("h3",{id:"event-binding"},"Event Binding"),(0,r.kt)("p",null,"It is used to bind an event from HTML to a method from the class and the event should put in the prentices ",(0,r.kt)("inlineCode",{parentName:"p"},"()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'<button (click)="toggleImage()">Show Image</button>\n')),(0,r.kt)("p",null,"\ud83d\udea9 methods should have () too."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/event-binding"},"Event Binding")),(0,r.kt)("h3",{id:"two-way-data-binding"},"Two way data binding"),(0,r.kt)("p",null,"Generally, to use 2-way data binding we need something like ",(0,r.kt)("inlineCode",{parentName:"p"},"input"),"s, so first we need ",(0,r.kt)("strong",{parentName:"p"},"Property Binding")," to bind a value\nfrom the class to the input and when user types, we want to fill that property with new value, so we need to call an event.\nIn that case, we should use ",(0,r.kt)("strong",{parentName:"p"},"Event Binding"),". In fact we should use ",(0,r.kt)("inlineCode",{parentName:"p"},"[()]")," this form for 2-way data binding:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'<input type="text" [(ngModel)]="listFilter"/>\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/two-way-binding"},"2-Way Data Binding")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Data Binding",src:n(1152).Z,width:"1492",height:"713"})),(0,r.kt)("h3",{id:"pipes"},"Pipes"),(0,r.kt)("p",null,"Angular has own ",(0,r.kt)("inlineCode",{parentName:"p"},"Data Transform")," for data transformation built-in functions for ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Number"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Decimal"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Percent"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Currency"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON"),", etc."),(0,r.kt)("p",null,"\ud83d\udea9 Generally, pipes are used for transforming data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'{{product.productCode | lowercase}}\n<img [src]="product.imageUrl" [title]="product.productName | uppercase"/>\n{{product.price | currency | lowercase}}\n{{product.price | currency: "USD": "symbol": "1.2-2"}} // at least 1 number to the left of the decimal and 2 and only 2 numbers to the right of the decimal\n')),(0,r.kt)("p",null,"So, we can use multiple pipes. Also there are some pipes with parameters: ",(0,r.kt)("a",{parentName:"p",href:"https://angular.io/api?type=pipe"},"Pipes")),(0,r.kt)("h3",{id:"get--set"},"get & set"),(0,r.kt)("p",null,"In Angular by using ",(0,r.kt)("inlineCode",{parentName:"p"},"Getter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Setter")," we can get the value or set a new value to a ",(0,r.kt)("strong",{parentName:"p"},"private")," property (the convention is to use ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," for private properties):"),(0,r.kt)("p",null,"\ud83d\udea9 In fact, by using ",(0,r.kt)("inlineCode",{parentName:"p"},"Getter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Setter")," we are trying to make our variable immutable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"private _amount: number = 0;\n\nget amount(): number {\n    return this._amount;\n};\nset amount(value: number) {\n    this._amount = value;\n}\n")),(0,r.kt)("p",null,"\ud83d\udea9 Private property means, we want to use this variable inside the class and for outsiders we should use ",(0,r.kt)("inlineCode",{parentName:"p"},"Getter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Setter"),"."),(0,r.kt)("h3",{id:"input"},"@Input()"),(0,r.kt)("p",null,"It is a decorator to handle passed data from ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component to the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component using ",(0,r.kt)("inlineCode",{parentName:"p"},"Property Binding"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/app/star.component.ts"',title:'"./src/app/star.component.ts"'},"export class StarComponent implements OnChanges {\n  @Input() rating: number = 0;\n  cropWidth: number = 75;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cropWidth = (this.rating * 75) / 5;\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/app/product-list.component.html"',title:'"./src/app/product-list.component.html"'},'    <td>\n        <pm-star [rating]="product.starRating"></pm-star>\n    </td>\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/inputs-outputs"},"Inputs & Outputs")),(0,r.kt)("h3",{id:"output"},"@Output()"),(0,r.kt)("p",null,"By using this decorator, we can pass an event from ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," to the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component by using ",(0,r.kt)("inlineCode",{parentName:"p"},"Event Binding"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create an event in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component with desired argument data type:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class StarComponent implements OnChanges {\n  // ...\n  @Output() ratingClicked: EventEmitter<string> = new EventEmitter<string>();\n  // ...\n}\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Using the event in a method to call it in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component HTML file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="star.component.ts"',title:'"star.component.ts"'},"export class StarComponent implements OnChanges {\n  // ...\n  onClick(): void {\n    this.ratingClicked.emit(`The rating ${this.rating} was clicked!`);\n  }\n  // ...\n}\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Bind the event in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component to the element:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="star.component.html"',title:'"star.component.html"'},'<div (click)="onClick()">\n  \x3c!-- ... --\x3e\n</div>\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Bind the new event (the name which we give the ",(0,r.kt)("inlineCode",{parentName:"li"},"@Output")," in the child component) to the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component HTML file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="product-list.component.html"',title:'"product-list.component.html"'},'<td>\n  <pm-star\n    [rating]="product.starRating"\n    (ratingClicked)="onRatingClicked($event)"\n  ></pm-star>\n</td>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"onRatingClicked()")," method should created in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$event")," includes all the data that we passed with ",(0,r.kt)("inlineCode",{parentName:"li"},"this.ratingClicked.emit()")," in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component.")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Now we need to create the ",(0,r.kt)("inlineCode",{parentName:"li"},"onRatingClicked()")," method in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="product-list.component.ts"',title:'"product-list.component.ts"'},"export class ProductListComponent implements OnInit {\n  // ...\n  onRatingClicked(message: string): void {\n    this.pageTitle = `Product List: The message is: ${message}`;\n  }\n  // ...\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/inputs-outputs"},"Inputs & Outputs")),(0,r.kt)("h3",{id:"dependency-injection"},"Dependency Injection"),(0,r.kt)("p",null,"Sometimes we need to create a function or a piece of codes that is independent from the others and we can call it in any component."),(0,r.kt)("h4",{id:"services"},"Services"),(0,r.kt)("p",null,"Service is a type of class that is independent. ",(0,r.kt)("a",{parentName:"p",href:"#service"},"#Service")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"So we can create a service and Angular will make it ",(0,r.kt)("inlineCode",{parentName:"li"},"Singleton")," (single instance of our service) and\nthe ",(0,r.kt)("inlineCode",{parentName:"li"},"Injector")," (is a tool to inject our services as a dependency to our classes) will inject our services in the class."),(0,r.kt)("li",{parentName:"ul"},"Generally, we can inject our services in one component and its children or inject to the root and accessible through out the application:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Accessible for the components")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="product.service.ts"',title:'"product.service.ts"'},'@Injectable({\n  providedIn: "root",\n})\nexport class ProductService {\n  getProducts(): IProduct[] {\n    // ...\n  }\n}\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Accessible for a specific component and its children")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="product-list.component.ts"',title:'"product-list.component.ts"'},"@Component({\n  /* . . . */\n  providers: [ProductService]\n})\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/providers"},"Providers")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/dependency-injection"},"Dependency Injection")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Now we can inject and use our service as a dependency injection in the components:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="product-list.component.ts"',title:'"product-list.component.ts"'},"export class ProductListComponent implements OnInit {\n  // ...\n  constructor(private productService: ProductService) {}\n\n  ngOnInit(): void {\n    this.products = this.productService.getProducts();\n    this.filteredProducts = this.products;\n  }\n  // ...\n}\n")),(0,r.kt)("h3",{id:"rxjs--observable"},"RxJs & Observable"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RxJs")," (",(0,r.kt)("strong",{parentName:"p"},"Reactive Extensions"),") is a library for mixin or composing data using observable sequences."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Generally, ",(0,r.kt)("inlineCode",{parentName:"li"},"Observable")," is just like ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise()"),", so we need to make our action ",(0,r.kt)("inlineCode",{parentName:"li"},"Observable"),", otherwise, we can't ",(0,r.kt)("inlineCode",{parentName:"li"},"Subscribe"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Observable")," doesn't do anything until we ",(0,r.kt)("inlineCode",{parentName:"li"},"Subscribe")," to something."),(0,r.kt)("li",{parentName:"ul"},"After subscribe, we have 3 stages (In case of pressing keys by user):",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Next"),": We'll notify by each key on pressing."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Error"),": If there is an error, we'll get it in this stage."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Complete"),": After finishing the action, we'll notify by this stage."))),(0,r.kt)("li",{parentName:"ul"},"It has over 100 pipe that we can use when we are subscribing to something, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"lowercase"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"uppercase"),", etc."),(0,r.kt)("li",{parentName:"ul"},"To cleanup the ",(0,r.kt)("inlineCode",{parentName:"li"},"subscription"),", after the action, we need to ",(0,r.kt)("inlineCode",{parentName:"li"},"unsubscribe")," the action."),(0,r.kt)("li",{parentName:"ul"},"The convention for observable variable is to use ",(0,r.kt)("inlineCode",{parentName:"li"},"$")," after the name of the variable."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<observable variable>.pipe(<pipe functions separated by (,)>).subscribe(<callback func>)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Observable, range, map, filter } from "rxjs";\n\nconst source$: Observable<number> = range(0, 10);\n\nsource$\n  .pipe(\n    map((x) => x * 3),\n    filter((x) => x % 2 === 0)\n  )\n  .subscribe((x) => console.log(x));\n')),(0,r.kt)("h4",{id:"http"},"http"),(0,r.kt)("p",null,"Usually, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"Observable")," to make a request to another source, to do so, we need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClientModule")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.modules.ts"),"\nand inject ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpClient")," to our services:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="services/products.service.ts"',title:'"services/products.service.ts"'},'import { Observable, catchError, tap, throwError } from "rxjs";\n\nexport class ProductService {\n  private productUrl = "api/products/products.json";\n\n  constructor(private http: HttpClient) {}\n\n  //? Get Products\n  getProducts(): Observable<IProduct[]> {\n    return this.http.get<IProduct[]>(this.productUrl).pipe(\n      tap((data) => console.log(`All: ${JSON.stringify(data)}`)),\n      catchError(this.handleError)\n    );\n  }\n  //? Error handling\n  private handleError(err: HttpErrorResponse) {\n    let errMsg = "";\n\n    if (err.error instanceof ErrorEvent)\n      errMsg = `An error occurred: ${err.error.message}`;\n    else\n      errMsg = `Server returned code: ${err.status}, error message is: ${err.error.message}`;\n\n    console.log(errMsg);\n    return throwError(() => errMsg);\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"tap"),": Is a pipe for showing not-streamed data. We can use it for logging or debugging. ",(0,r.kt)("a",{parentName:"p",href:"https://rxjs.dev/api/index/function/tap"},"tap"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"catchError"),": Is a pipe for catching errors, generally we need to return an error object observable with ",(0,r.kt)("inlineCode",{parentName:"p"},"throwError"),". ",(0,r.kt)("a",{parentName:"p",href:"https://rxjs.dev/api/index/function/catchError"},"catchError")," --- ",(0,r.kt)("a",{parentName:"p",href:"https://rxjs.dev/api/index/function/throwError"},"throwError")),(0,r.kt)("p",null,"Now we can ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," our service to get the data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="product-list.component.ts"',title:'"product-list.component.ts"'},'export class ProductListComponent implements OnInit, OnDestroy {\n  //...\n  errorMessage: string = "";\n  sub?: Subscription;\n  products: IProduct[] = [];\n  filteredProducts: IProduct[] = [];\n  //...\n\n  ngOnInit(): void {\n    this.sub = this.productService.getProducts().subscribe({\n      next: (products) => {\n        this.products = products;\n        this.filteredProducts = this.products;\n      },\n      error: (err) => (this.errorMessage = err),\n      complete: () => console.log("Request has been done!"),\n    });\n  }\n  ngOnDestroy(): void {\n    this.sub?.unsubscribe();\n  }\n  //...\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Since this a http request, so the ",(0,r.kt)("inlineCode",{parentName:"li"},"next")," function will execute once."),(0,r.kt)("li",{parentName:"ul"},"Each service will return a subscription and we can use it for ",(0,r.kt)("inlineCode",{parentName:"li"},"unsubscribe")," the request on unmount lifecycle.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/observables"},"Observable")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/rx-library"},"RxJs")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://rxjs.dev/guide/operators#categories-of-operators"},"RxJs - Operators")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/api/common/http/HttpClient"},"http")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://rxjs.dev/guide/subscription"},"subscription")),(0,r.kt)("h3",{id:"lifecycle-hooks"},"Lifecycle Hooks"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/lifecycle-hooks"},"Lifecycle Hooks")),(0,r.kt)("h4",{id:"oninit"},"OnInit"),(0,r.kt)("p",null,"We can initialize our component or retrieve data from backend in this lifecycle"),(0,r.kt)("h4",{id:"onchanges"},"onChanges"),(0,r.kt)("p",null,"We can do something after change to input properties"),(0,r.kt)("h4",{id:"ondestroy"},"onDestroy"),(0,r.kt)("p",null,"We can prevent, or show a prompt to the user before leave the component or cleanup before destroy the component"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Generally, to use the ",(0,r.kt)("inlineCode",{parentName:"li"},"Lifecycle"),"s, we need to implement them in our ",(0,r.kt)("inlineCode",{parentName:"li"},"class"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Component, OnInit } from "@angular/core";\n\n@Component({\n  // ...\n})\nexport class ProductListComponent implements OnInit {\n  //...\n  ngOnInit(): void {\n    console.log("On Init");\n  }\n}\n')),(0,r.kt)("h3",{id:"custom-pipe"},"Custom Pipe"),(0,r.kt)("p",null,"To create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Custom Pipe")," we need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," and use ",(0,r.kt)("inlineCode",{parentName:"p"},"@Pipe")," decorator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/pipes/convert-to-spaces.pipe.ts"',title:'"src/app/pipes/convert-to-spaces.pipe.ts"'},'import { Pipe, PipeTransform } from "@angular/core";\n\n@Pipe({\n  name: "convertToSpaces",\n})\nexport class ConvertToSpacesPipe implements PipeTransform {\n  /**\n   * Convert any specified character to space\n   * @param {string} value - Interpolation property\n   * @param {string} character - The character that we want to be replaced\n   */\n  transform(value: string, character: string): string {\n    return value.replace(character, " ");\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/app/products/product-list.component.html"',title:'"src/app/products/product-list.component.html"'},'<td>{{product.productCode | lowercase | convertToSpaces:"-"}}</td>\n')),(0,r.kt)("p",null,"\ud83d\udea9 After creating our custom pipe, we need to add it to ",(0,r.kt)("inlineCode",{parentName:"p"},"declarations")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.module.ts")),(0,r.kt)("h3",{id:"router"},"Router"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"To use the router, we should add it to our ",(0,r.kt)("inlineCode",{parentName:"li"},"app.module.ts"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'@NgModule({\n  declarations: [/*...*/],\n  imports: [\n    //...\n    RouterModule.forRoot([\n      {path: "products", component: ProductListComponent},\n      {path: "products/:id", component: ProductDetailComponent}, // Route with path params\n      {path: "welcome", component: WelcomeComponent},\n      {path: "", redirectTo: "welcome", pathMatch: "full"}, // Exact math\n      {path: "**", component: ProductListComponent},\n    ])\n  ],\n  bootstrap: [AppComponent]\n})\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Better to use a separate file for routing"),(0,r.kt)("li",{parentName:"ul"},"Better to right the more specific route at the beginning and less specific at the end. The order is matter!"),(0,r.kt)("li",{parentName:"ul"},"Better to remove the ",(0,r.kt)("inlineCode",{parentName:"li"},"selector")," from those pages which we want to navigate to them with router.")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Now we can pass ",(0,r.kt)("inlineCode",{parentName:"li"},"routerLink")," as a directive to any HTML element and make it clickable:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="components/layout/navbar.component.html"',title:'"components/layout/navbar.component.html"'},'<ul class="nav nav-pills">\n  <li><a class="nav-link" routerLink="/welcome">Home</a></li>\n  <li><a class="nav-link" routerLink="/products">Product List</a></li>\n</ul>\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"If we want to pass a ",(0,r.kt)("inlineCode",{parentName:"li"},"path param")," or a ",(0,r.kt)("inlineCode",{parentName:"li"},"query param"),", we need to pass an array to ",(0,r.kt)("inlineCode",{parentName:"li"},"routerLink"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="pages/product-list.component.html"',title:'"pages/product-list.component.html"'},"<td>\n  <a [routerLink]=\"['/products', product.productId]\">{{product.productName}}</a>\n</td>\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Now by using ",(0,r.kt)("inlineCode",{parentName:"li"},"ActivatedRoute")," dependency injection, we can get the ",(0,r.kt)("inlineCode",{parentName:"li"},"params"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="pages/products/product-detail.component.ts"',title:'"pages/products/product-detail.component.ts"'},"constructor(private route: ActivatedRoute) { }\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Now for getting the params, we can use 2 different approach based on our needs:"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Snapshot"),": Read the parameter one time:")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'this.route.snapshot.paramMap.get("id");\n')),(0,r.kt)("ol",{parentName:"li",start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Observable"),": Read the emitted parameters as they change:")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'this.route.paramMap.subscribe((params) => console.log(params.get("id")));\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'the "id" must be matched to the ',(0,r.kt)("inlineCode",{parentName:"li"},"path: products/:id")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Now we need to show the selected route in the view by using ",(0,r.kt)("inlineCode",{parentName:"p"},"router-outlet"),":"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.component.html"',title:'"app.component.html"'},'<div class="container">\n  <router-outlet></router-outlet>\n</div>\n')),(0,r.kt)("ol",{start:7},(0,r.kt)("li",{parentName:"ol"},"If we want to navigate to another route but not with routerLink, instead inside our code, we can do this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="pages/products/product-detail.component.ts"',title:'"pages/products/product-detail.component.ts"'},'  constructor(private route: ActivatedRoute, private router: Router) { }\n\n  onBack(): void {\n    this.router.navigate(["/products"])\n  }\n')),(0,r.kt)("p",null,"Now we can bind this function to a button in the HTML file to navigate."),(0,r.kt)("h3",{id:"guard-1"},"Guard"),(0,r.kt)("p",null,"Angular provides several ways to protect our routes: ",(0,r.kt)("a",{parentName:"p",href:"#guard"},"#Guard")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"CanActivate"),": Guard navigation ",(0,r.kt)("strong",{parentName:"li"},"to")," a route."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"CanDeactivate"),": Guard navigation ",(0,r.kt)("strong",{parentName:"li"},"from")," a route."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Resolve"),": Pre-fetch data before activating a route."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"CanLoad"),": Prevent asynchronous routing.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"These 4 types are like ",(0,r.kt)("inlineCode",{parentName:"li"},"Services")," and we can use them as a dependency injection.")),(0,r.kt)("p",null,"After generating a guard, we can check our route, in this case, prevent to call invalid route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="guard/product-detail.guard.ts"',title:'"guard/product-detail.guard.ts"'},'export class ProductDetailGuard implements CanActivate {\n  constructor(private router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    const id = Number(route.paramMap.get("id"));\n    if (isNaN(id) || id < 1) {\n      alert("Invalid product id");\n      this.router.navigate(["/products"]);\n      return false;\n    }\n    return true;\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"route: ActivatedRouteSnapshot"),": Provide current route information."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state: RouterStateSnapshot"),": Provide router state information.")),(0,r.kt)("p",null,"Now we can use this guard to wrap those routes that we want to protect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},'RouterModule.forRoot([\n  { path: "products", component: ProductListComponent },\n  {\n    path: "products/:id",\n    canActivate: [ProductDetailGuard],\n    component: ProductDetailComponent,\n  },\n  //...\n]);\n')),(0,r.kt)("h3",{id:"ngmodule"},"NgModule"),(0,r.kt)("p",null,"Sometimes we need to breakdown our main ",(0,r.kt)("inlineCode",{parentName:"p"},"app.module.ts")," to smaller module to handle better and make a good structure."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To generate a module we can use ",(0,r.kt)("a",{parentName:"li",href:"#module"},"#Module")),(0,r.kt)("li",{parentName:"ul"},"After creating a new module, we should add it into ",(0,r.kt)("inlineCode",{parentName:"li"},"imports")," array in any module that we want to use. (In case of not using CLI)"),(0,r.kt)("li",{parentName:"ul"},"Then we can add all components, pipes, guard and other things that are related to each other in new module like ",(0,r.kt)("inlineCode",{parentName:"li"},"FormsModule"),", etc."),(0,r.kt)("li",{parentName:"ul"},"Also, we can add the related routes to the router inside the new module not as a ",(0,r.kt)("inlineCode",{parentName:"li"},"forRoot"),", as a ",(0,r.kt)("inlineCode",{parentName:"li"},"forChild"),"."),(0,r.kt)("li",{parentName:"ul"},"The CLI command will import ",(0,r.kt)("inlineCode",{parentName:"li"},"CommonModule")," by default which is used for share the common module between all modules, like ",(0,r.kt)("inlineCode",{parentName:"li"},"BrowserModule")," (",(0,r.kt)("inlineCode",{parentName:"li"},"ngIf-ngFor"),").")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="app.module.ts" {4-7,14,17-18, 23} showLineNumbers',title:'"app.module.ts"',"{4-7,14,17-18,":!0,"23}":!0,showLineNumbers:!0},'@NgModule({\n  declarations: [\n    AppComponent,\n-   ProductListComponent,\n-   ConvertToSpacesPipe,\n-   StarComponent,\n-   ProductDetailComponent,\n    WelcomeComponent,\n    NotFoundComponent,\n    NavbarComponent\n  ],\n  imports: [\n    BrowserModule,\n-   FormsModule,\n    HttpClientModule,\n    RouterModule.forRoot([\n-     {path: "products", component: ProductListComponent},\n-     {path: "products/:id", canActivate: [ProductDetailGuard], component: ProductDetailComponent},\n      {path: "welcome", component: WelcomeComponent},\n      {path: "", redirectTo: "welcome", pathMatch: "full"},\n      {path: "**", component: NotFoundComponent},\n    ]),\n+   ProductModule\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="/pages/products/product.module.ts" {4-7,11-17} showLineNumbers',title:'"/pages/products/product.module.ts"',"{4-7,11-17}":!0,showLineNumbers:!0},'//...\n@NgModule({\n  declarations: [\n+   ProductListComponent,\n+   ProductDetailComponent,\n+   ConvertToSpacesPipe,\n+   StarComponent\n  ],\n  imports: [\n    CommonModule,\n+   FormsModule,\n+   RouterModule.forChild(\n+     [\n+       {path: "products", component: ProductListComponent},\n+       {path: "products/:id", canActivate: [ProductDetailGuard], component: ProductDetailComponent},\n+     ]\n+   )\n  ]\n})\nexport class ProductModule { }\n')),(0,r.kt)("h3",{id:"shared-module-standalone"},"Shared Module (Standalone)"),(0,r.kt)("p",null,"Generally, when we want to organize commonly used pieces of our app and export those pieces to share them, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"share.module.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ng g m components/shared/shared --flat -m pages/products/product.module\n")),(0,r.kt)("p",null,"In this case, we want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"star.component.ts")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"product")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"products")," pages, so we need to ",(0,r.kt)("inlineCode",{parentName:"p"},"import")," it in ",(0,r.kt)("inlineCode",{parentName:"p"},"product.module.ts"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="/pages/products/product.module.ts" {6-7,10-11,18} showLineNumbers',title:'"/pages/products/product.module.ts"',"{6-7,10-11,18}":!0,showLineNumbers:!0},'//...\n@NgModule({\n  declarations: [\n    ProductListComponent,\n    ProductDetailComponent,\n-   ConvertToSpacesPipe,\n-   StarComponent\n  ],\n  imports: [\n-   CommonModule,\n-   FormsModule,\n    RouterModule.forChild(\n      [\n        {path: "products", component: ProductListComponent},\n        {path: "products/:id", canActivate: [ProductDetailGuard], component: ProductDetailComponent},\n      ]\n    ),\n+   SharedModule\n  ]\n})\nexport class ProductModule { }\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="/components/shared/shared.module.ts" {4-5,11-14} showLineNumbers',title:'"/components/shared/shared.module.ts"',"{4-5,11-14}":!0,showLineNumbers:!0},"//...\n@NgModule({\n  declarations: [\n+   ConvertToSpacesPipe,\n+   StarComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n+   CommonModule,\n+   FormsModule,\n+   StarComponent,\n+   ConvertToSpacesPipe\n  ]\n})\nexport class SharedModule { }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We must ",(0,r.kt)("inlineCode",{parentName:"li"},"declare")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"export")," those module that we want to use it in other modules (except the build-in Angular modules)")),(0,r.kt)("h3",{id:"declarations-array"},"declarations array"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each app has at least 1 ",(0,r.kt)("inlineCode",{parentName:"li"},"app.module.ts")," and a ",(0,r.kt)("inlineCode",{parentName:"li"},"bootstrap component")," (is a component which is mounted first)."),(0,r.kt)("li",{parentName:"ul"},"Every ",(0,r.kt)("inlineCode",{parentName:"li"},"component"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"directive")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"pipe")," belongs to ",(0,r.kt)("inlineCode",{parentName:"li"},"ONLY")," one Angular module and must be added to ",(0,r.kt)("inlineCode",{parentName:"li"},"declaration")," array (just these 3 classes!)."),(0,r.kt)("li",{parentName:"ul"},"All declared components, directives and pipes are private and accessible only to those components which are declared in the same module."),(0,r.kt)("li",{parentName:"ul"},"Generally, we must not declare a ",(0,r.kt)("inlineCode",{parentName:"li"},"component"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"directive")," or a ",(0,r.kt)("inlineCode",{parentName:"li"},"pipe")," in 2 different Angular module.")),(0,r.kt)("h3",{id:"exports-array"},"exports array"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When we want to share a ",(0,r.kt)("inlineCode",{parentName:"li"},"component"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"directive")," or a ",(0,r.kt)("inlineCode",{parentName:"li"},"pipe"),", we can export them."),(0,r.kt)("li",{parentName:"ul"},"We can export a 3rd party module or a build-in module to share it with another module.")),(0,r.kt)("h3",{id:"imports-array"},"imports array"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We can import built-in or 3rd party module in imports array."),(0,r.kt)("li",{parentName:"ul"},"Also, we can import other Angular module that we have created."),(0,r.kt)("li",{parentName:"ul"},"Importing a module does ",(0,r.kt)("strong",{parentName:"li"},"NOT")," provide access to its imported modules.")),(0,r.kt)("h3",{id:"providers-array"},"providers array"),(0,r.kt)("p",null,"It's not recommended anymore, instead use ",(0,r.kt)("inlineCode",{parentName:"p"},'providedIn: "root"')," inside the service."),(0,r.kt)("h2",{id:"tips"},"Tips"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Every component should add to ",(0,r.kt)("inlineCode",{parentName:"li"},"@NgModule()")," in the ",(0,r.kt)("inlineCode",{parentName:"li"},"app.module.ts")),(0,r.kt)("li",{parentName:"ul"},"Don't use ",(0,r.kt)("inlineCode",{parentName:"li"},"constructor")," with codes which it has side-effects, like requests. Just use for initialization"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Synchronous")," is just like a ",(0,r.kt)("strong",{parentName:"li"},"phone call"),", it is a real-time action, you talk, immediately I respond."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Asynchronous")," is like ",(0,r.kt)("strong",{parentName:"li"},"email"),", I send an email to you and don't wait for your respond and do another task."),(0,r.kt)("li",{parentName:"ul"},"In ",(0,r.kt)("inlineCode",{parentName:"li"},"angular.json")," file, we can modify the configuration like adding library's CSS or Js file or for example,\nwe can change the assets directory:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "assets": ["src/favicon.ico", "src/assets", "src/api"]\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"base")," tag in the ",(0,r.kt)("inlineCode",{parentName:"li"},"index.html")," is very important for the routing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Hash Busting"),": Every time we try to build our app, the bundler try to hash the Js files, because browsers are going to\ncache, by doing this, the browsers will download our files again.")),(0,r.kt)("h3",{id:"errors"},"Errors"),(0,r.kt)("p",null,"To check the errors in our app we can check this link\n",(0,r.kt)("a",{parentName:"p",href:"https://angular.io/errors"},"Angular Errors")))}c.isMDXComponent=!0},1152:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/data_binding-4f2e34022da4f31f9e76b74f2a0c92bd.jpg"}}]);