"use strict";(self.webpackChunkdocuments=self.webpackChunkdocuments||[]).push([[8993],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,v=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(v,s(s({ref:t},c),{},{components:n})):r.createElement(v,s({ref:t},c))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},918:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7366),a=(n(9496),n(9613));const o={title:"Svelte"},s=void 0,l={unversionedId:"Experiences/Svelte/svelte-starter",id:"Experiences/Svelte/svelte-starter",title:"Svelte",description:"It's framework like React, Vue and Next.",source:"@site/docs/Experiences/Svelte/svelte-starter.mdx",sourceDirName:"Experiences/Svelte",slug:"/Experiences/Svelte/svelte-starter",permalink:"/new-documents/docs/Experiences/Svelte/svelte-starter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Experiences/Svelte/svelte-starter.mdx",tags:[],version:"current",frontMatter:{title:"Svelte"},sidebar:"tutorialSidebar",previous:{title:"Angular",permalink:"/new-documents/docs/Experiences/Angular/angular-starter"},next:{title:"Angular Testing",permalink:"/new-documents/docs/Experiences/test/angular-test"}},i={},p=[{value:"How to use",id:"how-to-use",level:2},{value:"String Interpolation",id:"string-interpolation",level:3},{value:"Import",id:"import",level:3},{value:"Functions and updating DOM",id:"functions-and-updating-dom",level:3},{value:"Reactive action",id:"reactive-action",level:3},{value:"Group reactive statements",id:"group-reactive-statements",level:4},{value:"Reactive Array &amp; Object",id:"reactive-array--object",level:3},{value:"Props",id:"props",level:3},{value:"Spread props",id:"spread-props",level:4}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"It's framework like React, Vue and Next."),(0,a.kt)("h2",{id:"how-to-use"},"How to use"),(0,a.kt)("h3",{id:"string-interpolation"},"String Interpolation"),(0,a.kt)("p",null,"By using curly braces we can bind a variable to DOM or bind to an attribute."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte"},'<script>\n    let src = \'/tutorial/image.gif\';\n    let name="A man";\n<\/script>\n\n<img {src} alt="{name} dances."/>\n\n<style>\n    //...\n</style>\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We can use shorthand to bind a variable with the same name to an attribute."),(0,a.kt)("li",{parentName:"ul"},"Style tag is a component scope tag and it won't leak out.")),(0,a.kt)("h3",{id:"import"},"Import"),(0,a.kt)("p",null,"Similar to React."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte"},'<script>\n    import Nested from "./Nested.svelte"\n<\/script>\n\n<p>This is a paragraph.</p>\n<Nested/>\n')),(0,a.kt)("h3",{id:"functions-and-updating-dom"},"Functions and updating DOM"),(0,a.kt)("p",null,"To do that, we can use events:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte"},"<script>\n    let count = 0;\n\n    function incrementCount() {\n        count += 1;\n    }\n<\/script>\n\n<button on:click={incrementCount}>\n    Clicked {count} {count === 1 ? 'time' : 'times'}\n</button>\n")),(0,a.kt)("h3",{id:"reactive-action"},"Reactive action"),(0,a.kt)("p",null,"To do so, we need to use ",(0,a.kt)("inlineCode",{parentName:"p"},"$")," to declare this variable is a reactive and dependent one,\nso, Svelte will re-run the component when one of those references changed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte"},"<script>\n    let count = 0;\n    $: doubled = count * 2;\n\n    function handleClick() {\n        count += 1;\n    }\n<\/script>\n\n<button on:click={handleClick}>\n    Clicked {count} {count === 1 ? 'time' : 'times'}\n</button>\n\n<p>{count} doubled is {doubled}</p>\n")),(0,a.kt)("h4",{id:"group-reactive-statements"},"Group reactive statements"),(0,a.kt)("p",null,"We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"$")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," or a function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte"},"<script>\n    let count = 0;\n    $: console.log('the count is ' + count);\n    $: if (count >= 10) {\n        alert(\"count is dangerously high!\");\n        count = 9;\n    }\n\n    function handleClick() {\n        count += 1;\n    }\n<\/script>\n\n<button on:click={handleClick}>\n    Clicked {count}\n    {count === 1 ? 'time' : 'times'}\n</button>\n")),(0,a.kt)("h3",{id:"reactive-array--object"},"Reactive Array & Object"),(0,a.kt)("p",null,"As we know, ",(0,a.kt)("inlineCode",{parentName:"p"},"Array")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Object")," are by reference, in this case, to tell the complier\nupdate the values, we need to reassign the variable to itself (or using speared operator),\notherwise, it won't work."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte"},"<script>\n    let numbers = [1, 2, 3, 4];\n\n    function addNumber() {\n        numbers = [...numbers, numbers.length + 1]\n        // numbers.push(numbers.length + 1);\n        // numbers = numbers;\n    }\n\n    $: sum = numbers.reduce((t, n) => t + n, 0);\n<\/script>\n\n<p>{numbers.join(' + ')} = {sum}</p>\n\n<button on:click={addNumber}> Add a number </button>\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/updating-arrays-and-objects"},"Array & Object")),(0,a.kt)("h3",{id:"props"},"Props"),(0,a.kt)("p",null,"For using ",(0,a.kt)("inlineCode",{parentName:"p"},"props")," in Svelte, we need to first, pass the props with the component,\nthen, export the props inside the passed props component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte",metastring:'title="App.svelte"',title:'"App.svelte"'},"<script>\n    import Nested from './Nested.svelte';\n<\/script>\n\n<Nested answer={42} />\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte",metastring:'title="Nested.svelte"',title:'"Nested.svelte"'},"<script>\n    export let answer;\n<\/script>\n\n<p>The answer is {answer}</p>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Also, we can initialize the props:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte"},'<script>\n    export let answer = "a mystery";\n<\/script>\n')),(0,a.kt)("h4",{id:"spread-props"},"Spread props"),(0,a.kt)("p",null,"We can pass properties of an object to a component by using spread operator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte",metastring:'title="App.svelte"',title:'"App.svelte"'},"<script>\n    import Info from './Info.svelte';\n\n    const pkg = {\n        name: 'svelte',\n        version: 3,\n        speed: 'blazing',\n        website: 'https://svelte.dev'\n    };\n<\/script>\n\n\x3c!-- <Info name={pkg.name} version={pkg.version} speed={pkg.speed} website={pkg.website} /> --\x3e\n<Info {...pkg}/>\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte",metastring:'title="Info.svelte"',title:'"Info.svelte"'},'<script>\n    export let name;\n    export let version;\n    export let speed;\n    export let website;\n<\/script>\n\n<p>\n    The <code>{name}</code> package is {speed} fast. Download version {version} from\n    <a href="https://www.npmjs.com/package/{name}">npm</a>\n    and <a href={website}>learn more here</a>\n</p>\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Also, we can use ",(0,a.kt)("inlineCode",{parentName:"li"},"$$props")," directly, instead of export one by one, but it's not\nrecommended by Svelte, cause it's difficult for Svelte to optimize, but we can use it in rare situation.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-svelte",metastring:'title="Info.svelte"',title:'"Info.svelte"'},'<p>\n    The <code>{$$props.name}</code> package is {$$props.speed} fast. Download version {$$props.version} from\n    <a href="https://www.npmjs.com/package/{name}">npm</a>\n    and <a href={$$props.website}>learn more here</a>\n</p>\n')))}d.isMDXComponent=!0}}]);