"use strict";(self.webpackChunkdocuments=self.webpackChunkdocuments||[]).push([[8993],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(k,r(r({ref:t},c),{},{components:n})):a.createElement(k,r({ref:t},c))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},918:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7366),i=(n(9496),n(9613));const l={title:"Svelte"},r=void 0,o={unversionedId:"Experiences/Svelte/svelte-starter",id:"Experiences/Svelte/svelte-starter",title:"Svelte",description:"It's framework like React, Vue and Next.",source:"@site/docs/Experiences/Svelte/svelte-starter.mdx",sourceDirName:"Experiences/Svelte",slug:"/Experiences/Svelte/svelte-starter",permalink:"/new-documents/docs/Experiences/Svelte/svelte-starter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Experiences/Svelte/svelte-starter.mdx",tags:[],version:"current",frontMatter:{title:"Svelte"},sidebar:"tutorialSidebar",previous:{title:"Angular",permalink:"/new-documents/docs/Experiences/Angular/angular-starter"},next:{title:"Angular Testing",permalink:"/new-documents/docs/Experiences/test/angular-test"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"String Interpolation",id:"string-interpolation",level:3},{value:"Import",id:"import",level:3},{value:"Functions and updating DOM",id:"functions-and-updating-dom",level:3},{value:"Reactive action",id:"reactive-action",level:3},{value:"Group reactive statements",id:"group-reactive-statements",level:4},{value:"Reactivity",id:"reactivity",level:2},{value:"Reactive Array &amp; Object",id:"reactive-array--object",level:3},{value:"Props",id:"props",level:2},{value:"Spread props",id:"spread-props",level:4},{value:"Logic",id:"logic",level:2},{value:"if/else",id:"ifelse",level:3},{value:"else if",id:"else-if",level:4},{value:"loop",id:"loop",level:3},{value:"Await blocks",id:"await-blocks",level:3},{value:"Events",id:"events",level:2},{value:"events and <code>on:</code>",id:"events-and-on",level:3},{value:"Event modifiers",id:"event-modifiers",level:3},{value:"The full list of modifiers",id:"the-full-list-of-modifiers",level:4},{value:"Component events",id:"component-events",level:3},{value:"Event forwarding",id:"event-forwarding",level:4},{value:"Bindings",id:"bindings",level:2},{value:"Text/Number/Range inputs",id:"textnumberrange-inputs",level:3},{value:"Checkbox",id:"checkbox",level:3},{value:"Tips",id:"tips",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It's framework like React, Vue and Next."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("h3",{id:"string-interpolation"},"String Interpolation"),(0,i.kt)("p",null,"By using curly braces we can bind a variable to DOM or bind to an attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<script>\n    let src = \'/tutorial/image.gif\';\n    let name="A man";\n<\/script>\n\n<img {src} alt="{name} dances."/>\n\n<style>\n    //...\n</style>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We can use shorthand to bind a variable with the same name to an attribute."),(0,i.kt)("li",{parentName:"ul"},"Style tag is a component scope tag and it won't leak out.")),(0,i.kt)("h3",{id:"import"},"Import"),(0,i.kt)("p",null,"Similar to React."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<script>\n    import Nested from "./Nested.svelte"\n<\/script>\n\n<p>This is a paragraph.</p>\n<Nested/>\n')),(0,i.kt)("h3",{id:"functions-and-updating-dom"},"Functions and updating DOM"),(0,i.kt)("p",null,"To do that, we can use events:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<script>\n    let count = 0;\n\n    function incrementCount() {\n        count += 1;\n    }\n<\/script>\n\n<button on:click={incrementCount}>\n    Clicked {count} {count === 1 ? 'time' : 'times'}\n</button>\n")),(0,i.kt)("h3",{id:"reactive-action"},"Reactive action"),(0,i.kt)("p",null,"To do so, we need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," to declare this variable is a reactive and dependent one,\nso, Svelte will re-run the component when one of those references changed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<script>\n    let count = 0;\n    $: doubled = count * 2;\n\n    function handleClick() {\n        count += 1;\n    }\n<\/script>\n\n<button on:click={handleClick}>\n    Clicked {count} {count === 1 ? 'time' : 'times'}\n</button>\n\n<p>{count} doubled is {doubled}</p>\n")),(0,i.kt)("h4",{id:"group-reactive-statements"},"Group reactive statements"),(0,i.kt)("p",null,"We can use ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," or a function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<script>\n    let count = 0;\n    $: console.log('the count is ' + count);\n    $: if (count >= 10) {\n        alert(\"count is dangerously high!\");\n        count = 9;\n    }\n\n    function handleClick() {\n        count += 1;\n    }\n<\/script>\n\n<button on:click={handleClick}>\n    Clicked {count}\n    {count === 1 ? 'time' : 'times'}\n</button>\n")),(0,i.kt)("h2",{id:"reactivity"},"Reactivity"),(0,i.kt)("h3",{id:"reactive-array--object"},"Reactive Array & Object"),(0,i.kt)("p",null,"As we know, ",(0,i.kt)("inlineCode",{parentName:"p"},"Array")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")," are by reference, in this case, to tell the complier\nupdate the values, we need to reassign the variable to itself (or using speared operator),\notherwise, it won't work."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<script>\n    let numbers = [1, 2, 3, 4];\n\n    function addNumber() {\n        numbers = [...numbers, numbers.length + 1]\n        // numbers.push(numbers.length + 1);\n        // numbers = numbers;\n    }\n\n    $: sum = numbers.reduce((t, n) => t + n, 0);\n<\/script>\n\n<p>{numbers.join(' + ')} = {sum}</p>\n\n<button on:click={addNumber}> Add a number </button>\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/updating-arrays-and-objects"},"Array & Object")),(0,i.kt)("h2",{id:"props"},"Props"),(0,i.kt)("p",null,"For using ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," in Svelte, we need to first, pass the props with the component,\nthen, export the props inside the passed props component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.svelte"',title:'"App.svelte"'},"<script>\n    import Nested from './Nested.svelte';\n<\/script>\n\n<Nested answer={42} />\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Nested.svelte"',title:'"Nested.svelte"'},"<script>\n    export let answer;\n<\/script>\n\n<p>The answer is {answer}</p>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Also, we can initialize the props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<script>export let answer = "a mystery";<\/script>\n')),(0,i.kt)("h4",{id:"spread-props"},"Spread props"),(0,i.kt)("p",null,"We can pass properties of an object to a component by using spread operator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.svelte"',title:'"App.svelte"'},"<script>\n    import Info from './Info.svelte';\n\n    const pkg = {\n        name: 'svelte',\n        version: 3,\n        speed: 'blazing',\n        website: 'https://svelte.dev'\n    };\n<\/script>\n\n\x3c!-- <Info name={pkg.name} version={pkg.version} speed={pkg.speed} website={pkg.website} /> --\x3e\n<Info {...pkg}/>\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Info.svelte"',title:'"Info.svelte"'},'<script>\n    export let name;\n    export let version;\n    export let speed;\n    export let website;\n<\/script>\n\n<p>\n    The <code>{name}</code> package is {speed} fast. Download version {version} from\n    <a href="https://www.npmjs.com/package/{name}">npm</a>\n    and <a href={website}>learn more here</a>\n</p>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Also, we can use ",(0,i.kt)("inlineCode",{parentName:"li"},"$$props")," directly, instead of export one by one, but it's not\nrecommended by Svelte, cause it's difficult for Svelte to optimize, but we can use it in rare situation.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Info.svelte"',title:'"Info.svelte"'},'<p>\n  The <code>{$$props.name}</code> package is {$$props.speed} fast. Download\n  version {$$props.version} from\n  <a href="https://www.npmjs.com/package/{name}">npm</a>\n  and <a href={$$props.website}>learn more here</a>\n</p>\n')),(0,i.kt)("h2",{id:"logic"},"Logic"),(0,i.kt)("h3",{id:"ifelse"},"if/else"),(0,i.kt)("p",null,"Condition in Svelte is shown with ",(0,i.kt)("inlineCode",{parentName:"p"},"{#if}{/if}"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"{#if user.loggedIn}\n    <button on:click={toggle}> Log out </button>\n{:else}\n    <button on:click={toggle}> Log in </button>\n{/if}\n")),(0,i.kt)("h4",{id:"else-if"},"else if"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"{#if x > 10}\n  <p>{x} is greater than 10</p>\n{:else if 5 > x}\n  <p>{x} is less than 5</p>\n{:else}\n  <p>{x} is between 5 and 10</p>\n{/if}\n")),(0,i.kt)("p",null,"\ud83d\udd17 ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/if-blocks"},"Await blocks")),(0,i.kt)("h3",{id:"loop"},"loop"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"each")," represents for ",(0,i.kt)("inlineCode",{parentName:"p"},"loop")," in Svelte:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<script>\n    let cats = [\n        { id: 'J---aiyznGQ', name: 'Keyboard Cat' },\n        { id: 'z_AbfPXTKms', name: 'Maru' },\n    ];\n<\/script>\n<ul>\n    {#each cats as cat, index (cat.id)}\n    <li>\n        <a target=\"_blank\" href=\"https://www.youtube.com/watch?v={cat.id}\" rel=\"noreferrer\">\n            {index + 1}: {cat.name}\n        </a>\n    </li>\n    {/each}\n</ul>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Also, we can destructure the cat object: ",(0,i.kt)("inlineCode",{parentName:"li"},"{#each cats as {id, name}}")),(0,i.kt)("li",{parentName:"ul"},"For ",(0,i.kt)("inlineCode",{parentName:"li"},"delete")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"update")," a value in the list, we need to specify to Svelte which one is the one\nthat we want to edit, so we need to specify a ",(0,i.kt)("inlineCode",{parentName:"li"},"key")," for our ",(0,i.kt)("inlineCode",{parentName:"li"},"loop")," by using a unique identifier: ",(0,i.kt)("inlineCode",{parentName:"li"},"(cat.id)"))),(0,i.kt)("p",null,"\ud83d\udd17 ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/each-blocks"},"Each blocks")),(0,i.kt)("h3",{id:"await-blocks"},"Await blocks"),(0,i.kt)("p",null,"In Svelte, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," blocks inside HTML to show the stats of the promise:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<script>\n    async function getRandomNumber() {\n        const res = await fetch(`/tutorial/random-number`);\n        const text = await res.text();\n\n        if (res.ok) {\n            return text;\n        } else {\n            throw new Error(text);\n        }\n    }\n\n    let promise = getRandomNumber(); // execute at the load time\n\n    function handleClick() {\n        promise = getRandomNumber();\n    }\n<\/script>\n\n<button on:click={handleClick}> generate random number </button>\n\n{#await promise}\n    <p>...waiting</p>\n{:then number}  \x3c!-- number is the promise return value --\x3e\n    <p>{number}</p>\n{:catch error}\n    <p>{error}</p>\n{/await}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Also, we can ignore the pending state and just wait for the result:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"{#await promise then number}\n  <p>the number is {number}</p>\n{/await}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"await")," block will take care of ",(0,i.kt)("inlineCode",{parentName:"li"},"race")," promises and gives us just the first resolved promise.")),(0,i.kt)("p",null,"\ud83d\udd17 ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/await-blocks"},"Await blocks")),(0,i.kt)("h2",{id:"events"},"Events"),(0,i.kt)("h3",{id:"events-and-on"},"events and ",(0,i.kt)("inlineCode",{parentName:"h3"},"on:")),(0,i.kt)("p",null,"We can use any DOM events with ",(0,i.kt)("inlineCode",{parentName:"p"},"on:")," directive:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<script>\n<div on:mousemove={handleMousemove} role="presentation"> \x3c!-- role="none" --\x3e\n    The mouse position is {m.x} x {m.y}\n</div>\n<\/script>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Also, we can use inline handlers and there is no restriction or performance issue with that.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<div\n  on:mousemove={(e) => (m = { x: e.clientX, y: e.clientY })}\n  role="presentation"\n>\n  The mouse position is {m.x} x {m.y}\n</div>\n')),(0,i.kt)("p",null,"\ud83d\udd17 ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/dom-events"},"Events")),(0,i.kt)("h3",{id:"event-modifiers"},"Event modifiers"),(0,i.kt)("p",null,"With the help of modifiers we have a better control over our codes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<script>\n    function handleClick() {\n        alert('clicked');\n    }\n<\/script>\n\n/<button on:click|once={handleClick}> Click me </button>\n")),(0,i.kt)("h4",{id:"the-full-list-of-modifiers"},"The full list of modifiers"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"preventDefault")," \u2014 calls ",(0,i.kt)("inlineCode",{parentName:"li"},"event.preventDefault()")," before running the handler. Useful for client-side form handling, for example."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"stopPropagation")," \u2014 calls ",(0,i.kt)("inlineCode",{parentName:"li"},"event.stopPropagation()"),", preventing the event reaching the next element"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"passive")," \u2014 improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"nonpassive")," \u2014 explicitly set passive: false"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"capture")," \u2014 fires the handler during the capture phase instead of the bubbling phase"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"once")," \u2014 remove the handler after the first time it runs"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"self")," \u2014 only trigger handler if event.target is the element itself"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"trusted")," \u2014 only trigger handler if event.isTrusted is true. I.e. if the event is triggered by a user action.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Also, we can use them as a chain modifiers: ",(0,i.kt)("inlineCode",{parentName:"li"},"on:click|once|capture={...}"))),(0,i.kt)("p",null,"\ud83d\udd17 ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/event-modifiers"},"Event modifiers")),(0,i.kt)("h3",{id:"component-events"},"Component events"),(0,i.kt)("p",null,"To pass a function (event) to another component, we need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"on:")," directive in parent component\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"createEventDispatcher")," inside child component to dispatch the function (event)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.svelte"',title:'"App.svelte"'},"<script>\n    import Inner from './Inner.svelte';\n\n    function handleMessage(event) {\n        alert(event.detail.text);\n    }\n<\/script>\n\n<Inner on:myevent={handleMessage} />\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Inner.svelte"',title:'"Inner.svelte"'},'<script>\n    import {createEventDispatcher} from "svelte";\n\n    const dispatch = createEventDispatcher();\n\n    function sayHello() {\n        dispatch("myevent", {\n            text: "Hello!"\n        })\n    }\n<\/script>\n\n<button on:click={sayHello}> Click to say hello </button>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"myevent"),": is not a unique name."),(0,i.kt)("li",{parentName:"ul"},"We ",(0,i.kt)("strong",{parentName:"li"},"MUST")," use ",(0,i.kt)("inlineCode",{parentName:"li"},"on:")," to pass a function (event)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createEventDispatcher")," ",(0,i.kt)("strong",{parentName:"li"},"MUST")," be called at the load time once, we can't do it later. e.g. inside ",(0,i.kt)("inlineCode",{parentName:"li"},"setTimeout"),"."),(0,i.kt)("li",{parentName:"ul"},"Also, it works for DOM events too, like: ",(0,i.kt)("inlineCode",{parentName:"li"},"on:click"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.svelte"',title:'"App.svelte"'},"<script>\n    import CustomButton from './CustomButton.svelte';\n\n    function handleClick() {\n        alert('Button Clicked');\n    }\n<\/script>\n\n<CustomButton on:click={handleClick} />\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="CustomButton.svelte"',title:'"CustomButton.svelte"'},"<button on:click> Click me </button>\n")),(0,i.kt)("p",null,"\ud83d\udd17 ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/component-events"},"Component events")),(0,i.kt)("h4",{id:"event-forwarding"},"Event forwarding"),(0,i.kt)("p",null,"If we want to pass the function to multiple layer inside, we can do the same as before,\nbut it's not efficient, instead, we can just pass the event, to the nested component without any additional code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.svelte"',title:'"App.svelte"'},"<script>\n    import Outer from './Outer.svelte';\n\n    function handleMessage(event) {\n        alert(event.detail.text);\n    }\n<\/script>\n\n<Outer on:myevent={handleMessage} />\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Outer.svelte"',title:'"Outer.svelte"'},"<script>\n    import Inner from './Inner.svelte';\n<\/script>\n\n<Inner on:myevent/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Inner.svelte"',title:'"Inner.svelte"'},'<script>\n    import {createEventDispatcher} from "svelte";\n\n    const dispatch = createEventDispatcher();\n\n    function sayHello() {\n        dispatch("myevent", {\n            text: "Hello!"\n        })\n    }\n<\/script>\n\n<button on:click={sayHello}> Click to say hello </button>\n')),(0,i.kt)("p",null,"\ud83d\udd17 ",(0,i.kt)("a",{parentName:"p",href:"https://svelte.dev/tutorial/event-forwarding"},"Event forwarding")),(0,i.kt)("h2",{id:"bindings"},"Bindings"),(0,i.kt)("h3",{id:"textnumberrange-inputs"},"Text/Number/Range inputs"),(0,i.kt)("p",null,"By using ",(0,i.kt)("inlineCode",{parentName:"p"},"bind:")," directive, we are able to bind a variable to an input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<script>\n    let name = \'world\';\n<\/script>\n\n<input bind:value={name} />\n<h1>Hello {name}!</h1>\n<input type="number" bind:value={a} min="0" max="10" />\n<input type="range" bind:value={a} min="0" max="10" />\n<p>{a}</p>\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Basically, Svelte will take care of input's type, for example, if we have a ",(0,i.kt)("inlineCode",{parentName:"li"},"range")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),"\ninputs, by using ",(0,i.kt)("inlineCode",{parentName:"li"},"bind:"),", Svelte will change the type of inputs to number, cause every inputs are string.")),(0,i.kt)("h3",{id:"checkbox"},"Checkbox"),(0,i.kt)("p",null,"There is a ",(0,i.kt)("inlineCode",{parentName:"p"},"bind:")," for checkbox too but, bind to ",(0,i.kt)("inlineCode",{parentName:"p"},"checked")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<script>\n    let yes = false;\n<\/script>\n\n<label>\n    <input type="checkbox" bind:checked={yes} />\n    Yes! Send me regular email spam\n</label>\n')),(0,i.kt)("h2",{id:"tips"},"Tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#")," uses for opening tag and ",(0,i.kt)("inlineCode",{parentName:"li"},"/")," for closing tag.")))}d.isMDXComponent=!0}}]);