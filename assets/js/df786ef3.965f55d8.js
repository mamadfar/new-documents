"use strict";(self.webpackChunkdocuments=self.webpackChunkdocuments||[]).push([[3564],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9752:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7366),r=(n(9496),n(9613));const i={id:"angular-starter",title:"angular"},o=void 0,l={unversionedId:"Experiences/Angular/angular-starter",id:"Experiences/Angular/angular-starter",title:"angular",description:"Installation",source:"@site/docs/Experiences/Angular/angular-starter.mdx",sourceDirName:"Experiences/Angular",slug:"/Experiences/Angular/angular-starter",permalink:"/docs/Experiences/Angular/angular-starter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Experiences/Angular/angular-starter.mdx",tags:[],version:"current",frontMatter:{id:"angular-starter",title:"angular"},sidebar:"tutorialSidebar",previous:{title:"Translate your site",permalink:"/docs/tutorial-extras/translate-your-site"},next:{title:"tips",permalink:"/docs/Experiences/tips"}},p={},s=[{value:"Installation",id:"installation",level:2},{value:"keywords",id:"keywords",level:2},{value:"Decorator",id:"decorator",level:3},{value:"Directives",id:"directives",level:3},{value:"Interpolation",id:"interpolation",level:3},{value:"Property Binding &amp; Template Expression",id:"property-binding--template-expression",level:3},{value:"Event Binding",id:"event-binding",level:3},{value:"Two way data binding",id:"two-way-data-binding",level:3},{value:"Pipes",id:"pipes",level:3},{value:"get &amp; set",id:"get--set",level:3},{value:"@Input()",id:"input",level:3},{value:"@Output()",id:"output",level:3},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Services",id:"services",level:4},{value:"Observable",id:"observable",level:3},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:3},{value:"OnInit",id:"oninit",level:4},{value:"onChanges",id:"onchanges",level:4},{value:"onDestroy",id:"ondestroy",level:4},{value:"Custom Pipe",id:"custom-pipe",level:3},{value:"Tips",id:"tips",level:2},{value:"Errors",id:"errors",level:3}],c={toc:s},d="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(d,(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"install globally")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm add @angular/cli -g\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"install new project")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ng new my-project --prefix pm\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--prefix")," is an optional property to add a prefix to all the selector directives in our components. In this case we changed the ",(0,r.kt)("inlineCode",{parentName:"li"},"app")," prefix to ",(0,r.kt)("inlineCode",{parentName:"li"},"pm"),"(",(0,r.kt)("pm-root",null),")")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"answer the questions based on your needs"),(0,r.kt)("li",{parentName:"ol"},"go the project folder, in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"cd my-project")),(0,r.kt)("li",{parentName:"ol"},"start the app")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm start\n")),(0,r.kt)("h2",{id:"keywords"},"keywords"),(0,r.kt)("h3",{id:"decorator"},"Decorator"),(0,r.kt)("p",null,"Decorators are functions and by using them we can add metadata or directives and we use them to add something to our class, like ",(0,r.kt)("inlineCode",{parentName:"p"},"@Component()"),",\nso in this case we can tell Angular how it should run our component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'@Component({\n  selector: `pm-root`,\n  template: `\n    <div>\n      <h1>{{ pageTitle }}</h1>\n      <div>First Component</div>\n    </div>\n  `,\n})\nexport class AppComponent {\n  pageTitle: string = "Hello World!";\n}\n')),(0,r.kt)("h3",{id:"directives"},"Directives"),(0,r.kt)("p",null,"In fact, directives are HTML-like tags and we use them to create something custom or we can use the built-in directives like: ",(0,r.kt)("inlineCode",{parentName:"p"},"*ngIf"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*ngFor")),(0,r.kt)("h3",{id:"interpolation"},"Interpolation"),(0,r.kt)("p",null,"Is a way to execute js code inside HTML code and it's one way binding from component class property to an element property"),(0,r.kt)("h3",{id:"property-binding--template-expression"},"Property Binding & Template Expression"),(0,r.kt)("p",null,"To bind a value (template expression is a property in our class and we can bind it to properties with quotes) to an element\nproperty with putting the property name inside a bracket ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-angular"},'<img [src]="product.imageUrl" />\n<img src="{{ product.imageUrl }}" />\n<input type="text" [disabled]="isDisabled" />\n<img src="http://myImages.org/{{ product.imageUrl }}" />\n')),(0,r.kt)("p",null,"\ud83d\udea9 Generally ",(0,r.kt)("strong",{parentName:"p"},"Interpolation")," is used for return a value to HTML code and ",(0,r.kt)("strong",{parentName:"p"},"Property Binding")," is used for bind any type of value, like boolean, number, etc."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/property-binding"},"Property Binding")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/property-binding-best-practices"},"Property Binding Best Practice")),(0,r.kt)("h3",{id:"event-binding"},"Event Binding"),(0,r.kt)("p",null,"It is used to bind an event from HTML to a method from the class and the event should put in the prentices ",(0,r.kt)("inlineCode",{parentName:"p"},"()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'<button (click)="toggleImage()">Show Image</button>\n')),(0,r.kt)("p",null,"\ud83d\udea9 methods should have () too."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/event-binding"},"Event Binding")),(0,r.kt)("h3",{id:"two-way-data-binding"},"Two way data binding"),(0,r.kt)("p",null,"Generally, to use 2-way data binding we need something like ",(0,r.kt)("inlineCode",{parentName:"p"},"input"),"s, so first we need ",(0,r.kt)("strong",{parentName:"p"},"Property Binding")," to bind a value\nfrom the class to the input and when user types, we want to fill that property with new value, so we need to call an event.\nIn that case, we should use ",(0,r.kt)("strong",{parentName:"p"},"Event Binding"),". In fact we should use ",(0,r.kt)("inlineCode",{parentName:"p"},"[()]")," this form for 2-way data binding:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'<input type="text" [(ngModel)]="listFilter"/>\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/two-way-binding"},"2-Way Data Binding")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Data Binding",src:n(1152).Z,width:"1492",height:"713"})),(0,r.kt)("h3",{id:"pipes"},"Pipes"),(0,r.kt)("p",null,"Angular has own ",(0,r.kt)("inlineCode",{parentName:"p"},"Data Transform")," for data transformation built-in functions for ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Number"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Decimal"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Percent"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Currency"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON"),", etc."),(0,r.kt)("p",null,"\ud83d\udea9 Generally, pipes are used for transforming data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'{{product.productCode | lowercase}}\n<img [src]="product.imageUrl" [title]="product.productName | uppercase"/>\n{{product.price | currency | lowercase}}\n{{product.price | currency: "USD": "symbol": "1.2-2"}} // at least 1 number to the left of the decimal and 2 and only 2 numbers to the right of the decimal\n')),(0,r.kt)("p",null,"So, we can use multiple pipes. Also there are some pipes with parameters: ",(0,r.kt)("a",{parentName:"p",href:"https://angular.io/api?type=pipe"},"Pipes")),(0,r.kt)("h3",{id:"get--set"},"get & set"),(0,r.kt)("p",null,"In Angular by using ",(0,r.kt)("inlineCode",{parentName:"p"},"Getter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Setter")," we can get the value or set a new value to a ",(0,r.kt)("strong",{parentName:"p"},"private")," property (the convention is to use ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," for private properties):"),(0,r.kt)("p",null,"\ud83d\udea9 In fact, by using ",(0,r.kt)("inlineCode",{parentName:"p"},"Getter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Setter")," we are trying to make our variable immutable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"private _amount: number = 0;\n\nget amount(): number {\n    return this._amount;\n};\nset amount(value: number) {\n    this._amount = value;\n}\n")),(0,r.kt)("p",null,"\ud83d\udea9 Private property means, we want to use this variable inside the class and for outsiders we should use ",(0,r.kt)("inlineCode",{parentName:"p"},"Getter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Setter"),"."),(0,r.kt)("h3",{id:"input"},"@Input()"),(0,r.kt)("p",null,"It is a decorator to handle passed data from ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component to the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component using ",(0,r.kt)("inlineCode",{parentName:"p"},"Property Binding"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/app/star.component.ts"',title:'"./src/app/star.component.ts"'},"export class StarComponent implements OnChanges {\n  @Input() rating: number = 0;\n  cropWidth: number = 75;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cropWidth = (this.rating * 75) / 5;\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/app/product-list.component.html"',title:'"./src/app/product-list.component.html"'},'    <td>\n        <pm-star [rating]="product.starRating"></pm-star>\n    </td>\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/inputs-outputs"},"Inputs & Outputs")),(0,r.kt)("h3",{id:"output"},"@Output()"),(0,r.kt)("p",null,"By using this decorator, we can pass an event from ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," to the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component by using ",(0,r.kt)("inlineCode",{parentName:"p"},"Event Binding"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create an event in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component with desired argument data type:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export class StarComponent implements OnChanges {\n  // ...\n  @Output() ratingClicked: EventEmitter<string> = new EventEmitter<string>();\n  // ...\n}\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Using the event in a method to call it in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component HTML file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="star.component.ts"',title:'"star.component.ts"'},"export class StarComponent implements OnChanges {\n  // ...\n  onClick(): void {\n    this.ratingClicked.emit(`The rating ${this.rating} was clicked!`);\n  }\n  // ...\n}\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Bind the event in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component to the element:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="star.component.html"',title:'"star.component.html"'},'<div (click)="onClick()">\n  \x3c!-- ... --\x3e\n</div>\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Bind the new event (the name which we give the ",(0,r.kt)("inlineCode",{parentName:"li"},"@Output")," in the child component) to the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component HTML file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="product-list.component.html"',title:'"product-list.component.html"'},'<td>\n  <pm-star\n    [rating]="product.starRating"\n    (ratingClicked)="onRatingClicked($event)"\n  ></pm-star>\n</td>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"onRatingClicked()")," method should created in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$event")," includes all the data that we passed with ",(0,r.kt)("inlineCode",{parentName:"li"},"this.ratingClicked.emit()")," in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Child"))," component.")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Now we need to create the ",(0,r.kt)("inlineCode",{parentName:"li"},"onRatingClicked()")," method in the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"Parent"))," component.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="product-list.component.ts"',title:'"product-list.component.ts"'},"export class ProductListComponent implements OnInit {\n  // ...\n  onRatingClicked(message: string): void {\n    this.pageTitle = `Product List: The message is: ${message}`;\n  }\n  // ...\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/inputs-outputs"},"Inputs & Outputs")),(0,r.kt)("h3",{id:"dependency-injection"},"Dependency Injection"),(0,r.kt)("p",null,"Sometimes we need to create a function or a piece of codes that is independent from the others and we can call it in any component."),(0,r.kt)("h4",{id:"services"},"Services"),(0,r.kt)("p",null,"Service is a type of class that is independent."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"So we can create a service and Angular will make it ",(0,r.kt)("inlineCode",{parentName:"li"},"Singleton")," (single instance of our service) and\nthe ",(0,r.kt)("inlineCode",{parentName:"li"},"Injector")," (is a tool to inject our services as a dependency to our classes) will inject our services in the class."),(0,r.kt)("li",{parentName:"ul"},"Generally, we can inject our services in one component and its children or inject to the root and accessible through out the application:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Accessible for the components")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="product.service.ts"',title:'"product.service.ts"'},'@Injectable({\n  providedIn: "root",\n})\nexport class ProductService {\n  getProducts(): IProduct[] {\n    // ...\n  }\n}\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Accessible for a specific component and its children")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="product-list.component.ts"',title:'"product-list.component.ts"'},"@Component({\n  /* . . . */\n  providers: [ProductService]\n})\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/providers"},"Providers")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/dependency-injection"},"Dependency Injection")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Now we can inject and use our service as a dependency injection in the components:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="product-list.component.ts"',title:'"product-list.component.ts"'},"export class ProductListComponent implements OnInit {\n  // ...\n  constructor(private productService: ProductService) {}\n\n  ngOnInit(): void {\n    this.products = this.productService.getProducts();\n    this.filteredProducts = this.products;\n  }\n  // ...\n}\n")),(0,r.kt)("h3",{id:"observable"},"Observable"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/observables"},"Observable")),(0,r.kt)("h3",{id:"lifecycle-hooks"},"Lifecycle Hooks"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/lifecycle-hooks"},"Lifecycle Hooks")),(0,r.kt)("h4",{id:"oninit"},"OnInit"),(0,r.kt)("p",null,"We can initialize our component or retrieve data from backend in this lifecycle"),(0,r.kt)("h4",{id:"onchanges"},"onChanges"),(0,r.kt)("p",null,"We can do something after change to input properties"),(0,r.kt)("h4",{id:"ondestroy"},"onDestroy"),(0,r.kt)("p",null,"We can prevent, or show a prompt to the user before leave the component or cleanup before destroy the component"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Generally, to use the ",(0,r.kt)("inlineCode",{parentName:"li"},"Lifecycle"),"s, we need to implement them in our ",(0,r.kt)("inlineCode",{parentName:"li"},"class"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Component, OnInit } from "@angular/core";\n\n@Component({\n  // ...\n})\nexport class ProductListComponent implements OnInit {\n  //...\n  ngOnInit(): void {\n    console.log("On Init");\n  }\n}\n')),(0,r.kt)("h3",{id:"custom-pipe"},"Custom Pipe"),(0,r.kt)("p",null,"To create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Custom Pipe")," we need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," and use ",(0,r.kt)("inlineCode",{parentName:"p"},"@Pipe")," decorator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/pipes/convert-to-spaces.pipe.ts"',title:'"src/app/pipes/convert-to-spaces.pipe.ts"'},'import { Pipe, PipeTransform } from "@angular/core";\n\n@Pipe({\n  name: "convertToSpaces",\n})\nexport class ConvertToSpacesPipe implements PipeTransform {\n  /**\n   * Convert any specified character to space\n   * @param {string} value - Interpolation property\n   * @param {string} character - The character that we want to be replaced\n   */\n  transform(value: string, character: string): string {\n    return value.replace(character, " ");\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/app/products/product-list.component.html"',title:'"src/app/products/product-list.component.html"'},'    <td>{{product.productCode | lowercase | convertToSpaces:"-"}}</td>\n')),(0,r.kt)("p",null,"\ud83d\udea9 After creating our custom pipe, we need to add it to ",(0,r.kt)("inlineCode",{parentName:"p"},"declarations")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.module.ts")),(0,r.kt)("h2",{id:"tips"},"Tips"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Every component should add to ",(0,r.kt)("inlineCode",{parentName:"li"},"@NgModule()")," in the ",(0,r.kt)("inlineCode",{parentName:"li"},"app.module.ts")),(0,r.kt)("li",{parentName:"ul"},"Don't use ",(0,r.kt)("inlineCode",{parentName:"li"},"constructor")," with codes which it has side-effects, like requests. Just use for initialization")),(0,r.kt)("h3",{id:"errors"},"Errors"),(0,r.kt)("p",null,"To check the errors in our app we can check this link\n",(0,r.kt)("a",{parentName:"p",href:"https://angular.io/errors"},"Angular Errors")))}u.isMDXComponent=!0},1152:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/data_binding-4f2e34022da4f31f9e76b74f2a0c92bd.jpg"}}]);